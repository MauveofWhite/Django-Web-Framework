https://docs.djangoproject.com/en/3.0/intro/tutorial05/

For example, while our tests here have covered some of the internal logic of a model and the way our views
publish information, you can use an “in-browser” framework such as Selenium to test the way your HTML actually
renders in a browser. These tools allow you to check not just the behavior of your Django code, but also,
for example, of your JavaScript. It’s quite something to see the tests launch a browser, and start interacting
with your site, as if a human being were driving it! Django includes LiveServerTestCase to facilitate integration
with tools like Selenium.

If you have a complex application, you may want to run tests automatically with every commit for the purposes
of continuous integration, so that quality control is itself - at least partially - automated.

A good way to spot untested parts of your application is to check code coverage. This also helps identify fragile
or even dead code. If you can’t test a piece of code, it usually means that code should be refactored or removed.
Coverage will help to identify dead code. See Integration with coverage.py for details.
